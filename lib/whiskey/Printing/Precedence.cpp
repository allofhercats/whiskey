#include <whiskey/Printing/Precedence.hpp>

#include <whiskey/Core/Assert.hpp>

namespace whiskey {
Precedence getPrecedence(NodeType type) {
  switch (type) {
    case NodeType::None:
      return Precedence::None;
    case NodeType::List:
      return Precedence::None;
    case NodeType::TypeVoid:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicBool:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicInt8:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicInt16:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicInt32:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicInt64:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicUInt8:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicUInt16:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicUInt32:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicUInt64:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicFloat32:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicFloat64:
      return Precedence::TypeTerm;
    case NodeType::TypeAtomicReal:
      return Precedence::TypeTerm;
    case NodeType::TypeSymbol:
      return Precedence::TypeTerm;
    case NodeType::TypeGroup:
      return Precedence::TypeTerm;
    case NodeType::TypeAccessUnary:
      return Precedence::TypeAccessUnary;
    case NodeType::TypeAccess:
      return Precedence::TypeAccess;
    case NodeType::TypeFunction:
      return Precedence::TypeFunction;
    case NodeType::ExprLiteralBool:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralInt8:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralInt16:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralInt32:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralInt64:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralUInt8:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralUInt16:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralUInt32:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralUInt64:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralChar8:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralChar16:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralChar32:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralFloat32:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralFloat64:
      return Precedence::ExprTerm;
    case NodeType::ExprLiteralReal:
      return Precedence::ExprTerm;
    case NodeType::ExprSymbol:
      return Precedence::ExprTerm;
    case NodeType::ExprCall:
      return Precedence::ExprCall;
    case NodeType::ExprAccessUnary:
      return Precedence::ExprAccess;
    case NodeType::ExprAccess:
      return Precedence::ExprAccess;
    case NodeType::ExprIncPre:
      return Precedence::ExprUnaryRight;
    case NodeType::ExprIncPost:
      return Precedence::ExprUnaryLeft;
    case NodeType::ExprDecPre:
      return Precedence::ExprUnaryRight;
    case NodeType::ExprDecPost:
      return Precedence::ExprUnaryLeft;
    case NodeType::ExprNeg:
      return Precedence::ExprUnaryRight;
    case NodeType::ExprBitNot:
      return Precedence::ExprUnaryRight;
    case NodeType::ExprExp:
      return Precedence::ExprExp;
    case NodeType::ExprMul:
      return Precedence::ExprMul;
    case NodeType::ExprDiv:
      return Precedence::ExprMul;
    case NodeType::ExprDivInt:
      return Precedence::ExprMul;
    case NodeType::ExprDivReal:
      return Precedence::ExprMul;
    case NodeType::ExprAdd:
      return Precedence::ExprAdd;
    case NodeType::ExprSub:
      return Precedence::ExprAdd;
    case NodeType::ExprMod:
      return Precedence::ExprMod;
    case NodeType::ExprBitShR:
      return Precedence::ExprBitShR;
    case NodeType::ExprBitShL:
      return Precedence::ExprBitShL;
    case NodeType::ExprBitAnd:
      return Precedence::ExprBitAnd;
    case NodeType::ExprBitOr:
      return Precedence::ExprBitOr;
    case NodeType::ExprBitXor:
      return Precedence::ExprBitOr;
    case NodeType::ExprLT:
      return Precedence::ExprCompare;
    case NodeType::ExprLE:
      return Precedence::ExprCompare;
    case NodeType::ExprGT:
      return Precedence::ExprCompare;
    case NodeType::ExprGE:
      return Precedence::ExprCompare;
    case NodeType::ExprNE:
      return Precedence::ExprCompare;
    case NodeType::ExprEQ:
      return Precedence::ExprCompare;
    case NodeType::ExprBoolNot:
      return Precedence::ExprBoolNot;
    case NodeType::ExprBoolAnd:
      return Precedence::ExprBoolAnd;
    case NodeType::ExprBoolOr:
      return Precedence::ExprBoolOr;
    case NodeType::ExprBoolImplies:
      return Precedence::ExprBoolImplies;
    case NodeType::ExprExpAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprMulAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprDivAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprDivIntAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprDivRealAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprAddAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprSubAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprModAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprBitShRAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprBitShLAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprBitAndAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprBitOrAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprBitXorAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprAssign:
      return Precedence::ExprAssign;
    case NodeType::ExprGroup:
      return Precedence::ExprTerm;
    case NodeType::StmtEmpty:
      return Precedence::None;
    case NodeType::StmtExpr:
      return Precedence::None;
    case NodeType::StmtDecl:
      return Precedence::None;
    case NodeType::StmtReturn:
      return Precedence::None;
    case NodeType::StmtContinue:
      return Precedence::None;
    case NodeType::StmtBreak:
      return Precedence::None;
    case NodeType::StmtIf:
      return Precedence::None;
    case NodeType::StmtWhile:
      return Precedence::None;
    case NodeType::StmtFor:
      return Precedence::None;
    case NodeType::StmtForEach:
      return Precedence::None;
    case NodeType::StmtBlock:
      return Precedence::None;
    case NodeType::DeclVariable:
      return Precedence::None;
    case NodeType::DeclFunction:
      return Precedence::None;
    case NodeType::DeclClass:
      return Precedence::None;
    case NodeType::DeclNamespace:
      return Precedence::None;
    case NodeType::Import:
      return Precedence::None;
    case NodeType::Unit:
      return Precedence::None;
  }
}

bool needsParenthesis(Precedence inner, Precedence outer) {
  if (inner == Precedence::None || outer == Precedence::None) {
    return false;
  } else {
    return inner < outer;
  }
}
} // namespace whiskey
